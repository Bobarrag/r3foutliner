{"ast":null,"code":"import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\nconst DIST_EPSILON = 1e-15;\n\nfunction isNearZero(value) {\n  return Math.abs(value) < DIST_EPSILON;\n}\n\nexport class ExtendedTriangle extends Triangle {\n  constructor() {\n    super(...arguments);\n    this.isExtendedTriangle = true;\n    this.satAxes = new Array(4).fill().map(() => new Vector3());\n    this.satBounds = new Array(4).fill().map(() => new SeparatingAxisBounds());\n    this.points = [this.a, this.b, this.c];\n    this.sphere = new Sphere();\n    this.plane = new Plane();\n    this.needsUpdate = true;\n  }\n\n  intersectsSphere(sphere) {\n    return sphereIntersectTriangle(sphere, this);\n  }\n\n  update() {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const points = this.points;\n    const satAxes = this.satAxes;\n    const satBounds = this.satBounds;\n    const axis0 = satAxes[0];\n    const sab0 = satBounds[0];\n    this.getNormal(axis0);\n    sab0.setFromPoints(axis0, points);\n    const axis1 = satAxes[1];\n    const sab1 = satBounds[1];\n    axis1.subVectors(a, b);\n    sab1.setFromPoints(axis1, points);\n    const axis2 = satAxes[2];\n    const sab2 = satBounds[2];\n    axis2.subVectors(b, c);\n    sab2.setFromPoints(axis2, points);\n    const axis3 = satAxes[3];\n    const sab3 = satBounds[3];\n    axis3.subVectors(c, a);\n    sab3.setFromPoints(axis3, points);\n    this.sphere.setFromPoints(this.points);\n    this.plane.setFromNormalAndCoplanarPoint(axis0, a);\n    this.needsUpdate = false;\n  }\n\n}\n\nExtendedTriangle.prototype.closestPointToSegment = function () {\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const edge = new Line3();\n  return function distanceToSegment(segment) {\n    let target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const {\n      start,\n      end\n    } = segment;\n    const points = this.points;\n    let distSq;\n    let closestDistanceSq = Infinity; // check the triangle edges\n\n    for (let i = 0; i < 3; i++) {\n      const nexti = (i + 1) % 3;\n      edge.start.copy(points[i]);\n      edge.end.copy(points[nexti]);\n      closestPointsSegmentToSegment(edge, segment, point1, point2);\n      distSq = point1.distanceToSquared(point2);\n\n      if (distSq < closestDistanceSq) {\n        closestDistanceSq = distSq;\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n    } // check end points\n\n\n    this.closestPointToPoint(start, point1);\n    distSq = start.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(start);\n    }\n\n    this.closestPointToPoint(end, point1);\n    distSq = end.distanceToSquared(point1);\n\n    if (distSq < closestDistanceSq) {\n      closestDistanceSq = distSq;\n      if (target1) target1.copy(point1);\n      if (target2) target2.copy(end);\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();\n\nExtendedTriangle.prototype.intersectsTriangle = function () {\n  const saTri2 = new ExtendedTriangle();\n  const arr1 = new Array(3);\n  const arr2 = new Array(3);\n  const cachedSatBounds = new SeparatingAxisBounds();\n  const cachedSatBounds2 = new SeparatingAxisBounds();\n  const cachedAxis = new Vector3();\n  const dir1 = new Vector3();\n  const dir2 = new Vector3();\n  const tempDir = new Vector3();\n  const edge = new Line3();\n  const edge1 = new Line3();\n  const edge2 = new Line3(); // TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n  // be a line contained by both triangles if not a different special case somehow represented in the return result.\n\n  return function intersectsTriangle(other) {\n    let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!other.isExtendedTriangle) {\n      saTri2.copy(other);\n      saTri2.update();\n      other = saTri2;\n    } else if (other.needsUpdate) {\n      other.update();\n    }\n\n    const plane1 = this.plane;\n    const plane2 = other.plane;\n\n    if (Math.abs(plane1.normal.dot(plane2.normal)) > 1.0 - 1e-10) {\n      // perform separating axis intersection test only for coplanar triangles\n      const satBounds1 = this.satBounds;\n      const satAxes1 = this.satAxes;\n      arr2[0] = other.a;\n      arr2[1] = other.b;\n      arr2[2] = other.c;\n\n      for (let i = 0; i < 4; i++) {\n        const sb = satBounds1[i];\n        const sa = satAxes1[i];\n        cachedSatBounds.setFromPoints(sa, arr2);\n        if (sb.isSeparated(cachedSatBounds)) return false;\n      }\n\n      const satBounds2 = other.satBounds;\n      const satAxes2 = other.satAxes;\n      arr1[0] = this.a;\n      arr1[1] = this.b;\n      arr1[2] = this.c;\n\n      for (let i = 0; i < 4; i++) {\n        const sb = satBounds2[i];\n        const sa = satAxes2[i];\n        cachedSatBounds.setFromPoints(sa, arr1);\n        if (sb.isSeparated(cachedSatBounds)) return false;\n      } // check crossed axes\n\n\n      for (let i = 0; i < 4; i++) {\n        const sa1 = satAxes1[i];\n\n        for (let i2 = 0; i2 < 4; i2++) {\n          const sa2 = satAxes2[i2];\n          cachedAxis.crossVectors(sa1, sa2);\n          cachedSatBounds.setFromPoints(cachedAxis, arr1);\n          cachedSatBounds2.setFromPoints(cachedAxis, arr2);\n          if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n        }\n      }\n\n      if (target) {\n        // TODO find two points that intersect on the edges and make that the result\n        console.warn('ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.');\n        target.start.set(0, 0, 0);\n        target.end.set(0, 0, 0);\n      }\n\n      return true;\n    } else {\n      // find the edge that intersects the other triangle plane\n      const points1 = this.points;\n      let found1 = false;\n      let count1 = 0;\n\n      for (let i = 0; i < 3; i++) {\n        const p = points1[i];\n        const pNext = points1[(i + 1) % 3];\n        edge.start.copy(p);\n        edge.end.copy(pNext);\n        edge.delta(dir1);\n        const targetPoint = found1 ? edge1.start : edge1.end;\n\n        if (isNearZero(plane2.normal.dot(dir1)) && isNearZero(plane2.distanceToPoint(edge.start))) {\n          // if the edge lies on the plane then take the line\n          edge1.copy(edge);\n          count1 = 2;\n          break;\n        } else if (plane2.intersectLine(edge, targetPoint) && !isNearZero(targetPoint.distanceTo(pNext))) {\n          count1++;\n\n          if (found1) {\n            break;\n          }\n\n          found1 = true;\n        }\n      }\n\n      if (count1 === 1 && this.containsPoint(edge1.start)) {\n        if (target) {\n          target.start.copy(edge1.start);\n          target.end.copy(edge1.start);\n        }\n\n        return true;\n      } else if (count1 !== 2) {\n        return false;\n      } // find the other triangles edge that intersects this plane\n\n\n      const points2 = other.points;\n      let found2 = false;\n      let count2 = 0;\n\n      for (let i = 0; i < 3; i++) {\n        const p = points2[i];\n        const pNext = points2[(i + 1) % 3];\n        edge.start.copy(p);\n        edge.end.copy(pNext);\n        edge.delta(dir2);\n        const targetPoint = found2 ? edge2.start : edge2.end;\n\n        if (isNearZero(plane1.normal.dot(dir2)) && isNearZero(plane1.distanceToPoint(edge.start))) {\n          // if the edge lies on the plane then take the line\n          edge2.copy(edge);\n          count2 = 2;\n          break;\n        } else if (plane1.intersectLine(edge, targetPoint) && !isNearZero(targetPoint.distanceTo(pNext))) {\n          count2++;\n\n          if (found2) {\n            break;\n          }\n\n          found2 = true;\n        }\n      }\n\n      if (count2 === 1 && this.containsPoint(edge2.start)) {\n        if (target) {\n          target.start.copy(edge2.start);\n          target.end.copy(edge2.start);\n        }\n\n        return true;\n      } else if (count2 !== 2) {\n        return false;\n      } // find swap the second edge so both lines are running the same direction\n\n\n      edge1.delta(dir1);\n      edge2.delta(dir2);\n\n      if (dir1.dot(dir2) < 0) {\n        let tmp = edge2.start;\n        edge2.start = edge2.end;\n        edge2.end = tmp;\n      } // check if the edges are overlapping\n\n\n      const s1 = edge1.start.dot(dir1);\n      const e1 = edge1.end.dot(dir1);\n      const s2 = edge2.start.dot(dir1);\n      const e2 = edge2.end.dot(dir1);\n      const separated1 = e1 < s2;\n      const separated2 = s1 < e2;\n\n      if (s1 !== e2 && s2 !== e1 && separated1 === separated2) {\n        return false;\n      } // assign the target output\n\n\n      if (target) {\n        tempDir.subVectors(edge1.start, edge2.start);\n\n        if (tempDir.dot(dir1) > 0) {\n          target.start.copy(edge1.start);\n        } else {\n          target.start.copy(edge2.start);\n        }\n\n        tempDir.subVectors(edge1.end, edge2.end);\n\n        if (tempDir.dot(dir1) < 0) {\n          target.end.copy(edge1.end);\n        } else {\n          target.end.copy(edge2.end);\n        }\n      }\n\n      return true;\n    }\n  };\n}();\n\nExtendedTriangle.prototype.distanceToPoint = function () {\n  const target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\n\nExtendedTriangle.prototype.distanceToTriangle = function () {\n  const point = new Vector3();\n  const point2 = new Vector3();\n  const cornerFields = ['a', 'b', 'c'];\n  const line1 = new Line3();\n  const line2 = new Line3();\n  return function distanceToTriangle(other) {\n    let target1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let target2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const lineTarget = target1 || target2 ? line1 : null;\n\n    if (this.intersectsTriangle(other, lineTarget)) {\n      if (target1 || target2) {\n        if (target1) lineTarget.getCenter(target1);\n        if (target2) lineTarget.getCenter(target2);\n      }\n\n      return 0;\n    }\n\n    let closestDistanceSq = Infinity; // check all point distances\n\n    for (let i = 0; i < 3; i++) {\n      let dist;\n      const field = cornerFields[i];\n      const otherVec = other[field];\n      this.closestPointToPoint(otherVec, point);\n      dist = otherVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(point);\n        if (target2) target2.copy(otherVec);\n      }\n\n      const thisVec = this[field];\n      other.closestPointToPoint(thisVec, point);\n      dist = thisVec.distanceToSquared(point);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(thisVec);\n        if (target2) target2.copy(point);\n      }\n    }\n\n    for (let i = 0; i < 3; i++) {\n      const f11 = cornerFields[i];\n      const f12 = cornerFields[(i + 1) % 3];\n      line1.set(this[f11], this[f12]);\n\n      for (let i2 = 0; i2 < 3; i2++) {\n        const f21 = cornerFields[i2];\n        const f22 = cornerFields[(i2 + 1) % 3];\n        line2.set(other[f21], other[f22]);\n        closestPointsSegmentToSegment(line1, line2, point, point2);\n        const dist = point.distanceToSquared(point2);\n\n        if (dist < closestDistanceSq) {\n          closestDistanceSq = dist;\n          if (target1) target1.copy(point);\n          if (target2) target2.copy(point2);\n        }\n      }\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Triangle","Vector3","Line3","Sphere","Plane","SeparatingAxisBounds","closestPointsSegmentToSegment","sphereIntersectTriangle","DIST_EPSILON","isNearZero","value","Math","abs","ExtendedTriangle","constructor","isExtendedTriangle","satAxes","Array","fill","map","satBounds","points","a","b","c","sphere","plane","needsUpdate","intersectsSphere","update","axis0","sab0","getNormal","setFromPoints","axis1","sab1","subVectors","axis2","sab2","axis3","sab3","setFromNormalAndCoplanarPoint","prototype","closestPointToSegment","point1","point2","edge","distanceToSegment","segment","target1","target2","start","end","distSq","closestDistanceSq","Infinity","i","nexti","copy","distanceToSquared","closestPointToPoint","sqrt","intersectsTriangle","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","dir1","dir2","tempDir","edge1","edge2","other","target","plane1","plane2","normal","dot","satBounds1","satAxes1","sb","sa","isSeparated","satBounds2","satAxes2","sa1","i2","sa2","crossVectors","console","warn","set","points1","found1","count1","p","pNext","delta","targetPoint","distanceToPoint","intersectLine","distanceTo","containsPoint","points2","found2","count2","tmp","s1","e1","s2","e2","separated1","separated2","point","distanceToTriangle","cornerFields","line1","line2","lineTarget","getCenter","dist","field","otherVec","thisVec","f11","f12","f21","f22"],"sources":["/Users/bonnybarragan/Documents/drawaboxoutliner/node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js"],"sourcesContent":["import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\n\nconst DIST_EPSILON = 1e-15;\nfunction isNearZero( value ) {\n\n\treturn Math.abs( value ) < DIST_EPSILON;\n\n}\n\nexport class ExtendedTriangle extends Triangle {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tthis.isExtendedTriangle = true;\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.points = [ this.a, this.b, this.c ];\n\t\tthis.sphere = new Sphere();\n\t\tthis.plane = new Plane();\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphereIntersectTriangle( sphere, this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst a = this.a;\n\t\tconst b = this.b;\n\t\tconst c = this.c;\n\t\tconst points = this.points;\n\n\t\tconst satAxes = this.satAxes;\n\t\tconst satBounds = this.satBounds;\n\n\t\tconst axis0 = satAxes[ 0 ];\n\t\tconst sab0 = satBounds[ 0 ];\n\t\tthis.getNormal( axis0 );\n\t\tsab0.setFromPoints( axis0, points );\n\n\t\tconst axis1 = satAxes[ 1 ];\n\t\tconst sab1 = satBounds[ 1 ];\n\t\taxis1.subVectors( a, b );\n\t\tsab1.setFromPoints( axis1, points );\n\n\t\tconst axis2 = satAxes[ 2 ];\n\t\tconst sab2 = satBounds[ 2 ];\n\t\taxis2.subVectors( b, c );\n\t\tsab2.setFromPoints( axis2, points );\n\n\t\tconst axis3 = satAxes[ 3 ];\n\t\tconst sab3 = satBounds[ 3 ];\n\t\taxis3.subVectors( c, a );\n\t\tsab3.setFromPoints( axis3, points );\n\n\t\tthis.sphere.setFromPoints( this.points );\n\t\tthis.plane.setFromNormalAndCoplanarPoint( axis0, a );\n\t\tthis.needsUpdate = false;\n\n\t}\n\n}\n\nExtendedTriangle.prototype.closestPointToSegment = ( function () {\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\tconst edge = new Line3();\n\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\n\n\t\tconst { start, end } = segment;\n\t\tconst points = this.points;\n\t\tlet distSq;\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check the triangle edges\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst nexti = ( i + 1 ) % 3;\n\t\t\tedge.start.copy( points[ i ] );\n\t\t\tedge.end.copy( points[ nexti ] );\n\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\n\n\t\t\tdistSq = point1.distanceToSquared( point2 );\n\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check end points\n\t\tthis.closestPointToPoint( start, point1 );\n\t\tdistSq = start.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( start );\n\n\t\t}\n\n\t\tthis.closestPointToPoint( end, point1 );\n\t\tdistSq = end.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( end );\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n\nExtendedTriangle.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri2 = new ExtendedTriangle();\n\tconst arr1 = new Array( 3 );\n\tconst arr2 = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\tconst dir1 = new Vector3();\n\tconst dir2 = new Vector3();\n\tconst tempDir = new Vector3();\n\tconst edge = new Line3();\n\tconst edge1 = new Line3();\n\tconst edge2 = new Line3();\n\n\t// TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n\t// be a line contained by both triangles if not a different special case somehow represented in the return result.\n\treturn function intersectsTriangle( other, target = null ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! other.isExtendedTriangle ) {\n\n\t\t\tsaTri2.copy( other );\n\t\t\tsaTri2.update();\n\t\t\tother = saTri2;\n\n\t\t} else if ( other.needsUpdate ) {\n\n\t\t\tother.update();\n\n\t\t}\n\n\t\tconst plane1 = this.plane;\n\t\tconst plane2 = other.plane;\n\n\t\tif ( Math.abs( plane1.normal.dot( plane2.normal ) ) > 1.0 - 1e-10 ) {\n\n\t\t\t// perform separating axis intersection test only for coplanar triangles\n\t\t\tconst satBounds1 = this.satBounds;\n\t\t\tconst satAxes1 = this.satAxes;\n\t\t\tarr2[ 0 ] = other.a;\n\t\t\tarr2[ 1 ] = other.b;\n\t\t\tarr2[ 2 ] = other.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds1[ i ];\n\t\t\t\tconst sa = satAxes1[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\tconst satBounds2 = other.satBounds;\n\t\t\tconst satAxes2 = other.satAxes;\n\t\t\tarr1[ 0 ] = this.a;\n\t\t\tarr1[ 1 ] = this.b;\n\t\t\tarr1[ 2 ] = this.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds2[ i ];\n\t\t\t\tconst sa = satAxes2[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\t// check crossed axes\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sa1 = satAxes1[ i ];\n\t\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\t\tconst sa2 = satAxes2[ i2 ];\n\t\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\n\t\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\n\t\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( target ) {\n\n\t\t\t\t// TODO find two points that intersect on the edges and make that the result\n\t\t\t\tconsole.warn( 'ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.' );\n\n\t\t\t\ttarget.start.set( 0, 0, 0 );\n\t\t\t\ttarget.end.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\t// find the edge that intersects the other triangle plane\n\t\t\tconst points1 = this.points;\n\t\t\tlet found1 = false;\n\t\t\tlet count1 = 0;\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst p = points1[ i ];\n\t\t\t\tconst pNext = points1[ ( i + 1 ) % 3 ];\n\n\t\t\t\tedge.start.copy( p );\n\t\t\t\tedge.end.copy( pNext );\n\t\t\t\tedge.delta( dir1 );\n\n\t\t\t\tconst targetPoint = found1 ? edge1.start : edge1.end;\n\t\t\t\tif ( isNearZero( plane2.normal.dot( dir1 ) ) && isNearZero( plane2.distanceToPoint( edge.start ) ) ) {\n\n\t\t\t\t\t// if the edge lies on the plane then take the line\n\t\t\t\t\tedge1.copy( edge );\n\t\t\t\t\tcount1 = 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else if ( plane2.intersectLine( edge, targetPoint ) && ! isNearZero( targetPoint.distanceTo( pNext ) ) ) {\n\n\t\t\t\t\tcount1 ++;\n\t\t\t\t\tif ( found1 ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfound1 = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( count1 === 1 && this.containsPoint( edge1.start ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.start );\n\t\t\t\t\ttarget.end.copy( edge1.start );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count1 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find the other triangles edge that intersects this plane\n\t\t\tconst points2 = other.points;\n\t\t\tlet found2 = false;\n\t\t\tlet count2 = 0;\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst p = points2[ i ];\n\t\t\t\tconst pNext = points2[ ( i + 1 ) % 3 ];\n\n\t\t\t\tedge.start.copy( p );\n\t\t\t\tedge.end.copy( pNext );\n\t\t\t\tedge.delta( dir2 );\n\n\t\t\t\tconst targetPoint = found2 ? edge2.start : edge2.end;\n\t\t\t\tif ( isNearZero( plane1.normal.dot( dir2 ) ) && isNearZero( plane1.distanceToPoint( edge.start ) ) ) {\n\n\t\t\t\t\t// if the edge lies on the plane then take the line\n\t\t\t\t\tedge2.copy( edge );\n\t\t\t\t\tcount2 = 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else if ( plane1.intersectLine( edge, targetPoint ) && ! isNearZero( targetPoint.distanceTo( pNext ) ) ) {\n\n\t\t\t\t\tcount2 ++;\n\t\t\t\t\tif ( found2 ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfound2 = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( count2 === 1 && this.containsPoint( edge2.start ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge2.start );\n\t\t\t\t\ttarget.end.copy( edge2.start );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count2 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find swap the second edge so both lines are running the same direction\n\t\t\tedge1.delta( dir1 );\n\t\t\tedge2.delta( dir2 );\n\n\t\t\tif ( dir1.dot( dir2 ) < 0 ) {\n\n\t\t\t\tlet tmp = edge2.start;\n\t\t\t\tedge2.start = edge2.end;\n\t\t\t\tedge2.end = tmp;\n\n\t\t\t}\n\n\t\t\t// check if the edges are overlapping\n\t\t\tconst s1 = edge1.start.dot( dir1 );\n\t\t\tconst e1 = edge1.end.dot( dir1 );\n\t\t\tconst s2 = edge2.start.dot( dir1 );\n\t\t\tconst e2 = edge2.end.dot( dir1 );\n\t\t\tconst separated1 = e1 < s2;\n\t\t\tconst separated2 = s1 < e2;\n\n\t\t\tif ( s1 !== e2 && s2 !== e1 && separated1 === separated2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// assign the target output\n\t\t\tif ( target ) {\n\n\t\t\t\ttempDir.subVectors( edge1.start, edge2.start );\n\t\t\t\tif ( tempDir.dot( dir1 ) > 0 ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.start );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.start.copy( edge2.start );\n\n\t\t\t\t}\n\n\t\t\t\ttempDir.subVectors( edge1.end, edge2.end );\n\t\t\t\tif ( tempDir.dot( dir1 ) < 0 ) {\n\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToTriangle = ( function () {\n\n\tconst point = new Vector3();\n\tconst point2 = new Vector3();\n\tconst cornerFields = [ 'a', 'b', 'c' ];\n\tconst line1 = new Line3();\n\tconst line2 = new Line3();\n\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\n\n\t\tconst lineTarget = target1 || target2 ? line1 : null;\n\t\tif ( this.intersectsTriangle( other, lineTarget ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tif ( target1 ) lineTarget.getCenter( target1 );\n\t\t\t\tif ( target2 ) lineTarget.getCenter( target2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check all point distances\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tlet dist;\n\t\t\tconst field = cornerFields[ i ];\n\t\t\tconst otherVec = other[ field ];\n\t\t\tthis.closestPointToPoint( otherVec, point );\n\n\t\t\tdist = otherVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\n\n\t\t\t}\n\n\n\t\t\tconst thisVec = this[ field ];\n\t\t\tother.closestPointToPoint( thisVec, point );\n\n\t\t\tdist = thisVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\n\t\t\t\tif ( target2 ) target2.copy( point );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst f11 = cornerFields[ i ];\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\n\n\t\t\t\tconst f21 = cornerFields[ i2 ];\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\n\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\n\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}