{"ast":null,"code":"var _jsxFileName = \"/Users/bonnybarragan/Documents/astrologuide/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useRef, useState, useMemo } from 'react';\nimport { Canvas, extend, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { Vector2 } from 'three'; //what does \"extend\" means mathematically in this context?  \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nextend({\n  OrbitControls,\n  EffectComposer,\n  OutlinePass,\n  RenderPass\n}); //children is the child elements of composer component\n\nconst Outliner = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    gl,\n    scene,\n    camera,\n    size\n  } = useThree();\n  const composer = useRef();\n  const aspect = useMemo(() => new Vector2(size.width, size.height), [size]);\n  useFrame(() => composer.current.render(), 1);\n  return /*#__PURE__*/_jsxDEV(\"effectComposer\", {\n    ref: composer,\n    args: [gl],\n    children: [/*#__PURE__*/_jsxDEV(\"renderPass\", {\n      attachArray: \"passes\",\n      args: [scene, camera]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"outlinePass\", {\n      attachArray: \"passes\",\n      args: [aspect, scene, camera],\n      selectedObjects: children,\n      visibleEdgeColor: \"Black\",\n      edgeStretch: 50,\n      edgeThickness: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Outliner, \"rmfCEEprYN8HWzg4DHuH/YDnGFg=\", false, function () {\n  return [useThree, useFrame];\n});\n\n_c = Outliner;\n\nconst CameraControls = () => {\n  _s2();\n\n  //getting the camera and the renderer \"gl\" from the useThree() functions which returneth them and others\n  const {\n    camera,\n    gl\n  } = useThree();\n  return (\n    /*#__PURE__*/\n    //this HAS to be orbitControls not OrbitControls for some reason\n    //if starts with capital gives \"need new invoke three.js blah blah\" error\n    _jsxDEV(\"orbitControls\", {\n      args: [camera, gl.domElement]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s2(CameraControls, \"aOHE5qGvbXOvnt+77cY4Zppi/o8=\", false, function () {\n  return [useThree];\n});\n\n_c2 = CameraControls;\n\nfunction Box(props) {\n  _s3();\n\n  // This reference gives us direct access to the THREE.Mesh object\n  //usereft is like declaring and setting a variable in a class from its parameterx \n  const ref = useRef(); // Hold state for hovered and clicked events\n\n  const [hovered, hover] = useState(false);\n  const [clicked, click] = useState(false); // const boxPosition = [00, 0, 0]\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  // useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n  // Return the view, these are regular Threejs elements expressed in JSX\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    // {...boxPosition}\n    ref: ref,\n    scale: 3,\n    onClick: event => click(!clicked),\n    onPointerOver: event => hover(true),\n    onPointerOut: event => hover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: hovered ? 'hotpink' : 'orange'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(Box, \"1rXSAAyBFhZEmUuKkdeoiIUYaY8=\");\n\n_c3 = Box;\nexport default function App() {\n  /*PRINCIPLES TO ABIDE BY:\n  CLOSURE\n  DESTRUCTURING OF ARRAYS,OBJ,PARAMS,ETC\n  NEVER VAR, USE LET ALWAYS AND CONST OFTEN\n  USE FOREACH, MAP, AND FILTER, THEY LOOK COMPOTENT\n  UNDERSTAND HOW 'THIS' KEYWORD WORKS\n  USE ... FOR SPREAD AND RESTING OF VARIABLES\n  USE ARROW FUNCTIONS!!!\n  MAKE AN APP THAT OUTLINES 3D SHAPES'S 2D FORM FOR DRAWINGS\n  IMPORT  https://api.le-systeme-solaire.net/ API\n  PREFER FUNCTIONS OVER CLASSES, NOT SURE WHY\n  Prefer to make components 'dumb', as in, focused on displaying a value to UI\n  and let custom hooks handle complex bussiness logic. don't really understand this yet so leaving here:\n  https://youtu.be/b0IZo2Aho9Y?t=460\n  */\n  return (\n    /*#__PURE__*/\n    //empty tags is react.fragment, DOM-like structure without actually modifying elements\n    _jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        width: '100%',\n        height: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Canvas, {\n        children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n          intensity: 0.5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"spotLight\", {\n          position: [10, 10, 10],\n          angle: 0.15,\n          penumbra: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n          position: [-10, -10, -10]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Outliner, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            position: [0, 0, 0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CameraControls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)\n  );\n}\n_c4 = App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Outliner\");\n$RefreshReg$(_c2, \"CameraControls\");\n$RefreshReg$(_c3, \"Box\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["useRef","useState","useMemo","Canvas","extend","useFrame","useThree","OrbitControls","OutlinePass","RenderPass","EffectComposer","Vector2","Outliner","children","gl","scene","camera","size","composer","aspect","width","height","current","render","CameraControls","domElement","Box","props","ref","hovered","hover","clicked","click","event","App","position"],"sources":["/Users/bonnybarragan/Documents/astrologuide/src/App.js"],"sourcesContent":["import { useRef, useState, useMemo } from 'react'\nimport { Canvas, extend, useFrame, useThree } from '@react-three/fiber'\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass'\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\"\nimport { Vector2 } from 'three';\n\n//what does \"extend\" means mathematically in this context?  \nextend({OrbitControls, EffectComposer, OutlinePass, RenderPass});\n\n//children is the child elements of composer component\nconst Outliner = ({ children }) => {\n  const {gl, scene, camera, size} = useThree();\n  const composer = useRef();\n  const aspect = useMemo( () => new Vector2( size.width, size.height ), [size] );\n  useFrame(() => composer.current.render(), 1);\n\n  return(\n    <effectComposer ref = {composer} args = {[gl]}>\n      <renderPass attachArray= \"passes\" args = {[scene, camera]}/>\n      <outlinePass\n      attachArray=\"passes\"\n      args={[aspect, scene, camera]}\n      selectedObjects= {children}\n      visibleEdgeColor = \"Black\"\n      edgeStretch={50}\n      edgeThickness={1}\n      />\n    </effectComposer>\n  )\n}\n\nconst CameraControls = () => {\n  //getting the camera and the renderer \"gl\" from the useThree() functions which returneth them and others\n  const {camera, gl} = useThree();\n  return (\n    //this HAS to be orbitControls not OrbitControls for some reason\n    //if starts with capital gives \"need new invoke three.js blah blah\" error\n    <orbitControls args={[camera, gl.domElement]}/>\n  )\n}\n\nfunction Box(props) {\n  // This reference gives us direct access to the THREE.Mesh object\n  //usereft is like declaring and setting a variable in a class from its parameterx \n  const ref = useRef()\n  // Hold state for hovered and clicked events\n  const [hovered, hover] = useState(false)\n  const [clicked, click] = useState(false)\n  // const boxPosition = [00, 0, 0]\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  // useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n  // Return the view, these are regular Threejs elements expressed in JSX\n  return (\n    <mesh\n      {...props}\n      // {...boxPosition}\n      ref={ref}\n      scale={3}\n      onClick={(event) => click(!clicked)}\n      onPointerOver={(event) => hover(true)}\n      onPointerOut={(event) => hover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nexport default function App() {\n    /*PRINCIPLES TO ABIDE BY:\n  CLOSURE\n  DESTRUCTURING OF ARRAYS,OBJ,PARAMS,ETC\n  NEVER VAR, USE LET ALWAYS AND CONST OFTEN\n  USE FOREACH, MAP, AND FILTER, THEY LOOK COMPOTENT\n  UNDERSTAND HOW 'THIS' KEYWORD WORKS\n  USE ... FOR SPREAD AND RESTING OF VARIABLES\n  USE ARROW FUNCTIONS!!!\n  MAKE AN APP THAT OUTLINES 3D SHAPES'S 2D FORM FOR DRAWINGS\n  IMPORT  https://api.le-systeme-solaire.net/ API\n  PREFER FUNCTIONS OVER CLASSES, NOT SURE WHY\n  Prefer to make components 'dumb', as in, focused on displaying a value to UI\n  and let custom hooks handle complex bussiness logic. don't really understand this yet so leaving here:\n  https://youtu.be/b0IZo2Aho9Y?t=460\n  */\n  return (\n    //empty tags is react.fragment, DOM-like structure without actually modifying elements\n    <div style= {{position: 'absolute', width: '100%', height: '100%'}}>\n      <Canvas>\n        <ambientLight intensity={0.5} />\n        <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />\n        <pointLight position={[-10, -10, -10]} />\n        <Outliner>\n          <Box position={[0, 0, 0]} />\n        </Outliner>\n        {/* <Box position={[0, 0, 0]} /> */}\n        <CameraControls/>\n      </Canvas>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}