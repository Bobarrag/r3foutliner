{"ast":null,"code":"import { BufferGeometry, Clock, Float32BufferAttribute, Mesh, OrthographicCamera, Vector2, WebGLRenderTarget } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n    this.passes = []; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n\n    for (let i = 0, il = this.passes.length; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n\n}\n\nclass Pass {\n  constructor() {\n    // if set to true, the pass is processed by the composer\n    this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n    this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n    this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n    this.renderToScreen = false;\n  }\n\n  setSize() {}\n\n  render() {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n\n} // Helper for passes that need to fill the viewport with a single quad.\n\n\nconst _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1); // https://github.com/mrdoob/three.js/pull/21358\n\n\nconst _geometry = new BufferGeometry();\n\n_geometry.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n\n_geometry.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\n\nclass FullScreenQuad {\n  constructor(material) {\n    this._mesh = new Mesh(_geometry, material);\n  }\n\n  dispose() {\n    this._mesh.geometry.dispose();\n  }\n\n  render(renderer) {\n    renderer.render(this._mesh, _camera);\n  }\n\n  get material() {\n    return this._mesh.material;\n  }\n\n  set material(value) {\n    this._mesh.material = value;\n  }\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };","map":{"version":3,"names":["BufferGeometry","Clock","Float32BufferAttribute","Mesh","OrthographicCamera","Vector2","WebGLRenderTarget","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","constructor","renderer","renderTarget","undefined","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","console","error","copyPass","clock","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","Pass","clear","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","geometry","value"],"sources":["/Users/bonnybarragan/Documents/astrologuide/node_modules/three/examples/jsm/postprocessing/EffectComposer.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tMesh,\n\tOrthographicCamera,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}