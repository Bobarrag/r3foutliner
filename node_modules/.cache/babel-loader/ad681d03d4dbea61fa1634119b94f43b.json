{"ast":null,"code":"import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n  constructor(scene, camera) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.inverse = false;\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    const context = renderer.getContext();\n    const state = renderer.state; // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false); // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true); // set up stencil\n\n    let writeValue, clearValue;\n\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue);\n    state.buffers.stencil.setLocked(true); // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera); // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false); // only render where stencil is set to 1\n\n    state.buffers.stencil.setLocked(false);\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    state.buffers.stencil.setLocked(true);\n  }\n\n}\n\nclass ClearMaskPass extends Pass {\n  constructor() {\n    super();\n    this.needsSwap = false;\n  }\n\n  render(renderer\n  /*, writeBuffer, readBuffer, deltaTime, maskActive */\n  ) {\n    renderer.state.buffers.stencil.setLocked(false);\n    renderer.state.buffers.stencil.setTest(false);\n  }\n\n}\n\nexport { MaskPass, ClearMaskPass };","map":{"version":3,"names":["Pass","MaskPass","constructor","scene","camera","clear","needsSwap","inverse","render","renderer","writeBuffer","readBuffer","context","getContext","state","buffers","color","setMask","depth","setLocked","writeValue","clearValue","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","ClearMaskPass"],"sources":["/Users/bonnybarragan/Documents/astrologuide/node_modules/three/examples/jsm/postprocessing/MaskPass.js"],"sourcesContent":["import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}