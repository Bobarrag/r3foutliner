{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass VRButton {\n  static createButton(renderer, options) {\n    if (options) {\n      console.error('THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.');\n    }\n\n    const button = document.createElement('button');\n\n    function\n    /*device*/\n    showEnterVR() {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function\n      /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function () {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const sessionInit = {\n            optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers']\n          };\n          navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n        supported ? showEnterVR() : showWebXRNotFound();\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if ('xr' in navigator) {\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n\n}\n\n_defineProperty(VRButton, \"xrSessionIsGranted\", false);\n\nexport { VRButton };","map":{"version":3,"names":["_defineProperty","VRButton","createButton","renderer","options","console","error","button","document","createElement","showEnterVR","currentSession","onSessionStarted","session","addEventListener","onSessionEnded","xr","setSession","textContent","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","sessionInit","optionalFeatures","navigator","requestSession","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","xrSessionIsGranted","click","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","registerSessionGrantedListener"],"sources":["/Users/bonnybarragan/Documents/astrologuide/node_modules/three-stdlib/webxr/VRButton.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass VRButton {\n  static createButton(renderer, options) {\n    if (options) {\n      console.error('THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.');\n    }\n\n    const button = document.createElement('button');\n\n    function\n      /*device*/\n    showEnterVR() {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function\n        /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function () {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const sessionInit = {\n            optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers']\n          };\n          navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n        supported ? showEnterVR() : showWebXRNotFound();\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if ('xr' in navigator) {\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n\n}\n\n_defineProperty(VRButton, \"xrSessionIsGranted\", false);\n\nexport { VRButton };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}